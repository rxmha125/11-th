'use server';
/**
 * @fileOverview Generates an image based on a user-provided prompt.
 *
 * - generateImageFromPrompt - A function that generates an image.
 * - GenerateImageFromPromptInput - The input type for the function.
 * - GenerateImageFromPromptOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
// Removed conceptual saveImageToDb import as actual saving will be handled in the calling component/service layer
// import { saveImageToDb } from '@/services/image-service';

const GenerateImageFromPromptInputSchema = z.object({
  promptText: z.string().describe('A textual prompt to guide image generation.'),
});
export type GenerateImageFromPromptInput = z.infer<typeof GenerateImageFromPromptInputSchema>;

const GenerateImageFromPromptOutputSchema = z.object({
  imageDataUri: z.string().describe("The generated image as a data URI. Expected format: 'data:image/png;base64,<encoded_data>'."),
});
export type GenerateImageFromPromptOutput = z.infer<typeof GenerateImageFromPromptOutputSchema>;

export async function generateImageFromPrompt(input: GenerateImageFromPromptInput): Promise<GenerateImageFromPromptOutput> {
  return generateImageFromPromptFlow(input);
}

const generateImageFromPromptFlow = ai.defineFlow(
  {
    name: 'generateImageFromPromptFlow',
    inputSchema: GenerateImageFromPromptInputSchema,
    outputSchema: GenerateImageFromPromptOutputSchema,
  },
  async (input) => {
    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-exp',
      prompt: `Generate a high-quality, artistic image based on the following description: ${input.promptText}. Avoid text in the image.`,
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
         safetySettings: [
          { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_ONLY_HIGH' },
          { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' },
          { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
          { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_LOW_AND_ABOVE' },
        ],
      },
    });

    if (!media || !media.url) {
      throw new Error('Image generation failed or returned no media URL.');
    }
    
    const imageDataUri = media.url;
    // The calling component (ImageGenerationSection) will handle saving to DB
    // using the image-service.ts
    // console.log("Image generated by flow. Saving will be handled by the component.");

    return {imageDataUri};
  }
);
